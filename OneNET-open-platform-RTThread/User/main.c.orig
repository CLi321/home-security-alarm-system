/**
  *********************************************************************
  * @file    main.c
  * @author  fire
  * @version V1.0
  * @date    2018-xx-xx
  * @brief   RT-Thread 3.0 + STM32 工程模版
  *********************************************************************
  * @attention
  *
  * 实验平台:野火 F103-指南者 STM32 开发板 
  * 论坛    :http://www.firebbs.cn
  * 淘宝    :https://fire-stm32.taobao.com
  *
  **********************************************************************
  */ 
 
/*
*************************************************************************
*                             包含的头文件
*************************************************************************
*/ 
#include "board.h"
#include "rtthread.h"


/*
*************************************************************************
*                               变量
*************************************************************************
*/



/*
* 程序清单：信号量用于任务同步
*/

/* 指向线程控制块的指针 *//* 定义线程控制块 */
static rt_thread_t tid1 = RT_NULL;
static rt_thread_t tid2 = RT_NULL;


///* 定义信号量控制块 */
//struct rt_semaphore sem;


/* 定义信号量控制块 */
rt_sem_t test_sem = RT_NULL;
rt_sem_t test_sem2 = RT_NULL;

/*
*************************************************************************
*                             函数声明
*************************************************************************
*/
static void thread1_entry(void* parameter);
static void thread2_entry(void* parameter);






/*
*************************************************************************
*                             main 函数
*************************************************************************
*/
/**
  * @brief  主函数
  * @param  无
  * @retval 无
  */
int main(void)
{	
    /* 
	 * 开发板硬件初始化，RTT系统初始化已经在main函数之前完成，
	 * 即在component.c文件中的rtthread_startup()函数中完成了。
	 * 所以在main函数中，只需要创建线程和启动线程即可。
	 */
	
/**************************************************************************/		
	/* 创建一个信号量 */
	test_sem = rt_sem_create("test_sem",/* 信号量名字 */
                     0,     /* 信号量初始值0 */
                     RT_IPC_FLAG_FIFO); /* 信号量模式 FIFO(0x00)*/
//  if (test_sem != RT_NULL)
//    rt_kprintf("信号量创建成功！\n\n");
	
/**************************************************************************/		
	
	/* 创建一个信号量 */
	test_sem2 = rt_sem_create("test_sem2",/* 信号量名字 */
                     0,     /* 信号量初始值0 */
                     RT_IPC_FLAG_FIFO); /* 信号量模式 FIFO(0x00)*/
//  if (test_sem2 != RT_NULL)
//    rt_kprintf("信号量创建成功！\n\n");	
	
/////**************************************************************************/	
////	
////	led1_thread =                          /* 线程控制块指针 */
////    rt_thread_create( "led1",              /* 线程名字 */
////                      led1_thread_entry,   /* 线程入口函数 */
////                      RT_NULL,             /* 线程入口函数参数 */
////                      512,                 /* 线程栈大小 */
////                      4,                   /* 线程的优先级 */
////                      20);                 /* 线程时间片 */
////                   
////    /* 启动线程，开启调度 */
////   if (led1_thread != RT_NULL)
////        rt_thread_startup(led1_thread);
////    else
////        return -1;

/////**************************************************************************/
/////**************************************************************************/		
////		
////		
////	led2_thread =                          /* 线程控制块指针 */
////    rt_thread_create( "led2",              /* 线程名字 */
////                      led2_thread_entry,   /* 线程入口函数 */
////                      RT_NULL,             /* 线程入口函数参数 */
////                      512,                 /* 线程栈大小 */
////                      5,                   /* 线程的优先级 */
////                      20);                 /* 线程时间片 */
////                   
////    /* 启动线程，开启调度 */
////   if (led2_thread != RT_NULL)
////        rt_thread_startup(led2_thread);
////    else
////        return -1;

		

/**************************************************************************/

		/* 创建线程1 */
		tid1 = rt_thread_create("tid1",
								thread1_entry, /* 线程入口是thread1_entry */
								RT_NULL, /* 入口参数是RT_NULL */
								512, 
								5, 
								20);
		if (tid1 != RT_NULL)
			rt_thread_startup(tid1);

		/* 创建线程2 */
		tid2 = rt_thread_create("tid2",
								thread2_entry,/* 线程入口是thread2_entry */
								RT_NULL, /* 入口参数是RT_NULL */
								512, 
								4,
								20);
		if (tid2 != RT_NULL)
			rt_thread_startup(tid2);

		return 0;
/**************************************************************************/
		
}

/*
*************************************************************************
*                             线程定义
*************************************************************************
*/


static void thread1_entry(void* parameter)
{	
	while(1)
	{


				rt_sem_take(test_sem, RT_WAITING_FOREVER);
		
				Face_recognition_myself();	
				Getting_Data_myself();
				OSD_myself();	
	}
}

static void thread2_entry(void* parameter)
{
		rt_err_t uwRet = RT_EOK;	
		uwRet = rt_sem_take(test_sem2,	/* 获取串口中断的信号量 */
												0); 	  /* 等待时间：0 */	

	while(1)
	{


				Upload_Receive_Data_STM32();
				Upload_Receive_Data_wechat();		
	}
}

/********************************END OF FILE****************************/
